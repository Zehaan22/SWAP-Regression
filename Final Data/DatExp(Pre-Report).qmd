---
title: "Data Experimentation (Pre Report)"
author: "Zehaan Naik"
format: html
editor: visual
---

## CPI Vs SENSEX Data

Loading the data:

```{r}
dat.gold <- read.csv("GoldUP.csv")
CPI.dat <- dat.gold$CPI
SENSEX.dat <- dat.gold$Sensex

CPI.dat <- ts(CPI.dat, start = c(2000,10),  frequency = 12)
SENSEX.dat <- ts(SENSEX.dat, start = c(2000,10),  frequency = 12)
```

Data Summary:

We have monthly data from October 2000 to August 2020.

```{r}
## CPI Data
summary(CPI.dat)

# SENSEX Data
summary(SENSEX.dat)
```

Firstly, let's individually analyse both the covariates as individual time series:

1.  CPI Data:

    ```{r}

    library(tseries)


    # Test for Stationarity
    plot.ts(CPI.dat, ylab = "CPI")
    adf.test(CPI.dat)
    ```

2.  SENSEX Data

    ```{r}

    # Test for Stationarity
    plot.ts(SENSEX.dat, ylab = "SENSEX")
    adf.test(SENSEX.dat)
    ```

As we can see in the case of both our covariates, their individual time series is **not** stationary (by the Augmented Dickey-Fuller Test).

Lastly, before diving into any data transformations or modeling, I wish to try out the Granger test on the two time series:

```{r}
library(lmtest)

grangertest(CPI.dat, SENSEX.dat)
grangertest(SENSEX.dat, CPI.dat)
```

As evident from the Granger test, we can use CPI to predict SENSEX directly however, the same cannot be said about SENSEX serving as a predictor for CPI. This motivates us to consider some transformations on our data to be able to arrive at a better fitting model to us SWAP on.

#### Growth Rate

Firstly, consider a growth rate analysis:

```{r}

# For CPI
CPI.qtrly <- diff(CPI.dat, lag = 4)
plot.ts(CPI.qtrly)
adf.test(CPI.qtrly)

# For SENSEX
SENSEX.qtrly <- diff(SENSEX.dat, lag = 4)
plot.ts(SENSEX.qtrly)
adf.test(SENSEX.qtrly)
```

We observe that differencing at a quaterly time gap does not give us a stationary time series. Hence, analysing the growth rate need not be the best way to go forward.

To further experiment on this we consider a bi-directional causality hypothesis with an AR(4) model on either co-variate.

```{r}

# Preparing the data
Y <- CPI.dat
X <- SENSEX.dat
# Computing Lags
Y.lag1 <- stats::lag(Y)
X.lag1 <- stats::lag(X)
Y.lag2 <- stats::lag(Y, k=2)
X.lag2 <- stats::lag(X, k=2)
Y.lag3 <- stats::lag(Y, k=3)
X.lag3 <- stats::lag(X, k=3)
Y.lag4 <- stats::lag(Y, k=4)
X.lag4 <- stats::lag(X, k=4)

# Fixing the lags
X <- X[1:(length(X)-5)]
X.lag1 <- X.lag1[2:(length(X.lag1)-4)]
X.lag2 <- X.lag2[3:(length(X.lag2)-3)]
X.lag3 <- X.lag3[4:(length(X.lag3)-2)]
X.lag4 <- X.lag4[5:(length(X.lag4)-1)]

Y <- Y[1:(length(Y)-5)]
Y.lag1 <- Y.lag1[2:(length(Y.lag1)-4)]
Y.lag2 <- Y.lag2[3:(length(Y.lag2)-3)]
Y.lag3 <- Y.lag3[4:(length(Y.lag3)-2)]
Y.lag4 <- Y.lag4[5:(length(Y.lag4)-1)]

## Direction 1 
m1 <- lm(Y~X+Y.lag1+Y.lag2+Y.lag3+Y.lag4)
summary(m1)

# Directrion 2
m2 <- lm(X~Y+X.lag1+X.lag2+X.lag3+X.lag4)
summary(m2)
```

Residuals plot for this:\

```{r}
# For Direction - 1
plot(m1$residuals)
adf.test(m1$residuals)

# For Direction - 2
plot(m2$residuals)
adf.test(m2$residuals)
```

```{r}

## Direction 1 
m1 <- lm(Y~X+X.lag1+Y.lag1+Y.lag2+Y.lag3+Y.lag4)
# For Direction - 1
plot(m1$residuals)
adf.test(m1$residuals)
summary(m1)

## Directrion 2
m2 <- lm(X~Y+Y.lag1+X.lag1+X.lag2+X.lag3+X.lag4)
# For Direction - 2
plot(m2$residuals)
adf.test(m2$residuals)
summary(m2)


```

Other lags of lag-1

```{r}

## Direction 1 
m1 <- lm(Y~X.lag1+X.lag2+X.lag3+X.lag4+Y.lag1+Y.lag2+Y.lag3+Y.lag4)
summary(m1)
plot(m1$residuals)
adf.test(m1$residuals)

## Direction 2 
m2 <- lm(X~Y.lag1+Y.lag2+Y.lag3+Y.lag4+X.lag1+X.lag2+X.lag3+X.lag4)
summary(m2)
plot(m2$residuals)
adf.test(m2$residuals)
```

```{r}

# For Direction - 1
plot(m1$residuals, ylab = "Residuals", main = "CPI on SENSEX")
adf.test(m1$residuals)

# For Direction - 2
plot(m2$residuals, ylab = "Residuals", main = "SENSEX on CPI")
adf.test(m2$residuals)
```

SWAP Model

```{r}
# Observing the data
plot(X,Y)
plot(X,Y.lag1)
plot(X,Y.lag2)
plot(X,Y.lag3)
plot(X,Y.lag4)
```

```{r}
# Observing the data
plot(Y,X)
plot(Y,X.lag1)
plot(Y,X.lag2)
plot(Y,X.lag3)
plot(Y,X.lag4)
```

SWAP model with L1 norm optimisation

```{r}
source("GMM.R")

# Preparing the data
Y <- SENSEX.dat
X <- CPI.dat

a = 0
b = 0
c = 1

data <- cbind(
  as.numeric(SENSEX.dat),
  as.numeric(CPI.dat)
)


K <- 2 

gmm_result <- gmm_em_mahalanobis(data, K)
plot(scale(data), col = gmm_result$clusters)

Y <- scale(data[,1])
X <- scale(data[,2])

der_a <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    if(Y[i]-(a*X[i]^2 + b*X[i] + c) >0){
      ret <- ret -  X[i]^2
    }else{
      ret <- ret +   X[i]^2
    }
    }
  return(ret/length(X))
}
der_b <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    if(Y[i]-(a*X[i]^2 + b*X[i] + c) >0){
      ret <- ret -  X[i]
    }else{
      ret <- ret +   X[i]
    }
    }
  return(ret/length(X))
}
der_c <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    if(Y[i]-(a*X[i]^2 + b*X[i] + c) >0){
      ret <- ret -  1
    }else{
      ret <- ret +   1
    }
    }
  return(ret/length(X))
}

# part - 1
X1 <- X[which(gmm_result$clusters == 1)]
Y1 <- Y[which(gmm_result$clusters == 1)]
n = 1e6
lr = 1e-4
for(i in 1:n){
  a_n <- a - lr*der_a(X1,Y1,a,b,c)
  b_n <- b - lr*der_b(X1,Y1,a,b,c)
  c_n <- c - lr*der_c(X1,Y1,a,b,c)
  a <- a_n
  b <- b_n
  c <- c_n
}

py <- a*X^2 + b*X + c

plot(X,Y, col = gmm_result$clusters)
lines(as.numeric(X),as.numeric(py),col = "red")
print(paste("a = ",a,"b = ",b,"c = ",c))

# part -2
der_inv_a <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    sqrt_term <- sqrt(abs(b^2 - 4*a*(c-Y[i])))
    if(X[i]+((b/(2*a)) - sqrt(abs(b^2 - 4*a*(c-Y[i])))/(2*a)) >0){
      
      ret <- ret -  b/(2*a^2) + (-b + 2*sqrt_term - 4*a*(c-Y[i])/sqrt_term)/(2*a^2)
    }else{
      ret <- ret +  b/(2*a^2) + (-b + 2*sqrt_term - 4*a*(c-Y[i])/sqrt_term)/(2*a^2)
    }
    }
  return(ret/length(X))
}
der_inv_b <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    sqrt_term <- sqrt(abs(b^2 - 4*a*(c-Y[i])))
    if(X[i]+((b/(2*a)) - sqrt(abs(b^2 - 4*a*(c-Y[i])))/(2*a)) >0){
      
      ret <- ret +  (1/(2*a))*(1 + b/(a*sqrt_term))
    }else{
      ret <- ret -  (1/(2*a))*(1 + b/(a*sqrt_term))
    }
    }
  return(ret/length(X))
}
der_inv_c <- function(X,Y,a,b,c){
  ret <- 0 
  for(i in 1:length(X)){
    sqrt_term <- sqrt(abs(b^2 - 4*a*(c-Y[i])))
    if(X[i]+((b/(2*a)) - sqrt(abs(b^2 - 4*a*(c-Y[i])))/(2*a)) >0){
      
      ret <- ret +  (1/sqrt_term)
    }else{
      ret <- ret -  (1/sqrt_term)
    }
    }
  return(ret/length(X))
}

X2 <- X[which(gmm_result$clusters == 2)]
Y2 <- Y[which(gmm_result$clusters == 2)]

for(i in 1:n){
  a_n <- a - lr*der_inv_a(X2,Y2,a,b,c)
  b_n <- b - lr*der_inv_b(X2,Y2,a,b,c)
  c_n <- c - lr*der_inv_c(X2,Y2,a,b,c)
  a <- a_n
  b <- b_n
  c <- c_n
}


p2y <- a*X^2 + b*X + c

plot(X,Y, xlab = "CPI", ylab = "SENSEX", main = "L1 Norm Optimisation", cex.main = 2, col = gmm_result$clusters)
lines(as.numeric(X),as.numeric(py),col = "red")
lines(as.numeric(X),as.numeric(p2y),col = "blue")
# Sample code to add a legend with lines instead of boxes
legend("bottomright", legend = c("Half run", "Full run", "Cluster - 1", "Cluster - 2"), 
       col = c("red", "blue", "black", "pink"), 
       lty = c(1, 1, NA, NA),         # Line type for Half and Full run, NA for clusters
       pch = c(NA, NA, 1, 1),         # Symbols for clusters only
       lwd = 2)                       # Line width for Half and Full run lines


print(paste("a = ",a,"b = ",b,"c = ",c))
```

```{r}
plot(Y-p2y,type = "p", 
     ylab = "residuals", 
     main = "L1 Norm Residuals",
     cex.main = 2, 
     col = gmm_result$clusters)
adf.test(Y-p2y)

r.squared <- function(Y, Ypreds,p=1){
  num <- sum((Y-Ypreds)^2)
  den <- sum((Y-mean(Y))^2)
  n <- length(Y)
  r2 <- 1-num/den
  return(1-(1-r2)*((n-1)/(n-p-1)))
}

r.squared(Y,p2y)
```

```{r}
plot(scale(X), scale(Y))
```
