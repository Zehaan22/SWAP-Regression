suicide <- read.csv("suicide_cleaned.csv")
library(dplyr)
suicide_new <- suicide
v <- NULL
for (i in 1:length(suicide$continent)) {
v[i] <- paste0(suicide$continent[i], ".", suicide$year[i])
}
suicide$continent.year <- v
# Plotting all the time series plots
suicide.2 <- suicide %>% group_by(continent.year) %>% summarise(suicide.tot.normal = (sum(suicides_no)/sum(population))*1e6 , year = year[1], continent = continent[1])
suicides <- split(suicide.2 , suicide.2$continent)
#time <- ts(data = suicides$Albania$suicide.tot.normal , start = min(suicides$Albania$year) , end = max(suicides$Albania$year))
time_series_plots <- c()
## all ts plots are stored by country name in time_series_plots object, save with write() if needed
for(i in unique(suicide$continent)){
data <- suicides[[i]]
time <- ts(data = data$suicide.tot.normal , start = min(data$year) , end = max(data$year))
plot.ts(time , xlab = "Year", ylab = "Suicide Rate Scaled" , main = i)
plt <- recordPlot()
time_series_plots[[i]] <- plt
}
#time_series_plots
suicide <- read.csv("suicide_cleaned.csv")
library(dplyr)
suicide_new <- suicide
v <- NULL
for (i in 1:length(suicide$continent)) {
v[i] <- paste0(suicide$continent[i], ".", suicide$year[i])
}
suicide$continent.year <- v
# Plotting all the time series plots
suicide.2 <- suicide %>% group_by(continent.year) %>% summarise(suicide.tot.normal = (sum(suicides_no)/sum(population))*1e6 , year = year[1], continent = continent[1])
suicides <- split(suicide.2 , suicide.2$continent)
#time <- ts(data = suicides$Albania$suicide.tot.normal , start = min(suicides$Albania$year) , end = max(suicides$Albania$year))
time_series_plots <- c()
## all ts plots are stored by country name in time_series_plots object, save with write() if needed
for(i in unique(suicide$continent)){
data <- suicides[[i]]
time <- ts(data = data$suicide.tot.normal , start = min(data$year) , end = max(data$year))
plot.ts(time , xlab = "Year", ylab = "Suicide Rate Scaled" , main = i)
plt <- recordPlot()
time_series_plots[[i]] <- plt
}
#time_series_plots
suicide <- read.csv("suicide_cleaned.csv")
library(dplyr)
suicide_new <- suicide
v <- NULL
for (i in 1:length(suicide$continent)) {
v[i] <- paste0(suicide$continent[i], ".", suicide$year[i])
}
suicide$continent.year <- v
# Plotting all the time series plots
suicide.2 <- suicide %>% group_by(continent.year) %>% summarise(suicide.tot.normal = (sum(suicides_no)/sum(population))*1e6 , year = year[1], continent = continent[1])
suicides <- split(suicide.2 , suicide.2$continent)
#time <- ts(data = suicides$Albania$suicide.tot.normal , start = min(suicides$Albania$year) , end = max(suicides$Albania$year))
time_series_plots <- c()
## all ts plots are stored by country name in time_series_plots object, save with write() if needed
for(i in unique(suicide$continent)){
data <- suicides[[i]]
time <- ts(data = data$suicide.tot.normal , start = min(data$year) , end = max(data$year))
plot.ts(time , xlab = "Year", ylab = "Suicide Rate Scaled" , main = i)
plt <- recordPlot()
time_series_plots[[i]] <- plt
}
#time_series_plots
data.final <- read.csv("../Happiness_Suicides.csv")
head(data.final)
library(rvest)
html <- read_html("https://www.myneta.info/andhrapradesh2019/index.php?action=summary&subAction=winner_serious_crime&sort=candidate#summary")
candidate_table <- html_nodes(html, ".w3-container .w3-table.w3-bordered")[[1]]
View(candidate_table)
xml_child(candidate_table, 7)
draws <- rbinom(10,1e3,.4)
plot(draws)
plot(density(draws))
draws <- rbinom(10,1e4,.4)
plot(density(draws))
set.seed(10)
draws <- rbinom(10,1e4,.4)
plot(density(draws))
hist(draws)
set.seed(10)
draws <- rbinom(1e4,10,.4)
hist(draws)
plot(density(draws))
hist(draws)
plot(density(draws))
hist(draws)
density(draws)
plot(density(draws))
hist(draws)
set.seed(10)
draws <- rbinom(1e4,10,.4)
hist(draws)
par(mfrow = c(2,1))
hist(draws)
par(mfrow = c(1,2))
hist(draws)
hist(proposals)
proposals <- rbinom(1e4,8,.6)
hist(proposals)
hist(draws)
proposals <- rbinom(1e4,8,.6)
hist(proposals)
hist(draws)
proposals <- rbinom(1e4,10,.6)
hist(proposals)
hist(draws)
proposals <- rbinom(1e4,8,.4)
hist(proposals)
hist(draws)
proposals <- rbinom(1e4,10,.5)
hist(proposals)
draws <- rnorm(1e4,10,.4) # bin(10,.4)
par(mfrow = c(1,2))
plot(density(draws))
proposals <- rnorm(1e4,8,.6)
plot(density(proposals))
plot(density(draws))
proposals <- rnorm(1e4,10,.6)
plot(density(proposals))
plot(density(draws))
proposals <- rnorm(1e4,8,.4)
plot(density(proposals))
plot(density(draws))
proposals <- rnorm(1e4,10,.5)
plot(density(proposals))
dat <- read_xlsx("Board_Data.clsx")
library(readxl)
dat <- read_xlsx("Board_Data.clsx")
setwd("~/IIM Internship/Board Data Analysis")
library(readxl)
dat <- read_xlsx("Board_Data.clsx")
dat.time <- read_xlsx("Time_query_data.xlsx")
dat <- read_xlsx("Board_Data.xlsx")
View(dat.time)
dat.time[-28]
dat.time <- dat.time[-28]
View(dat.time)
View(dat)
dat$`Total Compensation Paid to CEO 2023`[1]
as.numeric(dat$`Total Compensation Paid to CEO 2023`[1])
# Correcting for numerics
dat[2:27] <- as.numeric(dat[2:27])
dat[1]
dat[2:27]
# Correcting for numerics
dat[3:27] <- as.numeric(dat[3:27])
dat[3:27]
# Correcting for numerics
for(i in 3:27){
dat[i] <- as.numeric(dat[i])
}
dat[1]
dat[3]
as.numeric(dat[3])
library(dplyr)
# Correcting for numerics
for(i in 3:27){
dat[i] <- as.numeric(dat[i])
}
dat[[1]]
# Correcting for numerics
for(i in 3:27){
dat[i] <- as.numeric(dat[[i]])
}
for(i in 3:27){
dat.time[i] <- as.numeric(dat.time[[i]])
}
for(i in 33:52){
dat[i] <- as.numeric(dat[[i]])
}
save(dat, "Board_Data.Rdata")
save(dat, file = "Board_Data.Rdata")
save(dat.time, file = "Time_query_data.Rdata")
write_xlsx(dat, "Board_Data.xlsx")
write_xlsx(dat.time, "Time_query_data.xlsx")
# Storing the data
library(writexl)
write_xlsx(dat, "Board_Data.xlsx")
write_xlsx(dat.time, "Time_query_data.xlsx")
load("Board_Data.Rdata")
load("Time_query_data.Rdata")
load("Board_Data.Rdata")
load("Time_query_data.Rdata")
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://www.flipkart.com/%20/p/%20?pid=BELGUGMYVFHTDZHY")
html <- read_html("https://www.ajio.com/red-tape-reversible-belt-with-tang-buckle-closure/p/466742355_black")
# URL of the webpage
url <- "https://www.ajio.com/red-tape-reversible-belt-with-tang-buckle-closure/p/466742355_black"
# Read the webpage content
webpage <- read_html(url)
# Extract the price information
# Note: The actual CSS selectors or XPath might change based on the webpage structure
# You will need to inspect the webpage to get the correct selector
price <- webpage %>%
html_nodes(".prod-sp") %>% # Replace with the correct CSS selector for the price element
html_text() %>%
as.numeric()
# Print the extracted price
print(price)
# Extract the price information
# Note: The actual CSS selectors or XPath might change based on the webpage structure
# You will need to inspect the webpage to get the correct selector
price <- webpage %>%
html_nodes("div.prod-sp") %>% # Replace with the correct CSS selector for the price element
html_text() %>%
as.numeric()
# Print the extracted price
print(price)
# Extract the price information
# Note: The actual CSS selectors or XPath might change based on the webpage structure
# You will need to inspect the webpage to get the correct selector
price <- webpage %>%
html_nodes(".prod-price-section.prod-sp") %>% # Replace with the correct CSS selector for the price element
html_text() %>%
as.numeric()
# Print the extracted price
print(price)
# Extract the price information
# Note: The actual CSS selectors or XPath might change based on the webpage structure
# You will need to inspect the webpage to get the correct selector
price <- webpage %>%
html_nodes("div.prod-price-section.prod-sp") %>% # Replace with the correct CSS selector for the price element
html_text() %>%
as.numeric()
# Print the extracted price
print(price)
setwd("~/SWAP Regression Project/Codes/Data Sets")
dat <- read.csv("insurance.csv")
summary(dat)
summary(dat)
summary(dat)
hist(dat$bmi)
plot(density(dat$bmi))
plot(density(dat$bmi),  main = "Density Plot for BMI")
##MARKET ANALYSIS OF BANKING STOCKS##
library(tidyquant)
library(PerformanceAnalytics)
library(quantmod)
library(ggplot2)
library(xts)
library(zoo)
library(tidyverse)
library(dplyr)
library(PortfolioAnalytics)
library(plotly)
library(timetk)
library(cluster);    # clustering algorithms
library(factoextra); ## PLotting Clusters
library(matlib)
##PART 1##
#NSE DATA OF PUBLIC SECTOR BANKS
#'ALBK.NS',
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
sort(unique(psb_stock_price_data$symbol))
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
psb_stock_price_data <- tq_get(psb_stocks,
from = '-01-01',
to = '2023-09-30',
get = 'stock.prices')
log_ret_psb_stock <- psb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_psb_stock)
log_ret_psb_stock_xts <- log_ret_psb_stock %>%
spread(symbol, value = ret) %>%
tk_xts()
##PART 2##
#NSE DATA OF PRIVATE SECTOR BANKS
pvb_stocks <- c('AXISBANK.NS','BANDHANBNK.NS','CSBBANK.NS','CUB.NS','DCBBANK.NS',
'DHANBANK.NS','FEDERALBNK.NS','HDFCBANK.NS','ICICIBANK.NS','IDBI.NS',
'IDFCFIRSTB.NS','INDUSINDBK.NS','J&KBANK.NS','KARURVYSYA.NS','KOTAKBANK.NS',
'KTKBANK.NS','RBLBANK.NS','SOUTHBANK.NS','YESBANK.NS')
#DAILY STOCK DATA OF PVB BANKS#
#PERIOD JAN 2011 TO SEP 2023
pvb_stock_price_data <- tq_get(pvb_stocks,
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
sort(unique(pvb_stock_price_data$symbol))
log_ret_pvb_stock <- pvb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_pvb_stock)
log_ret_pvb_stock_xts <- log_ret_pvb_stock %>%
spread(symbol, value = ret) %>%
tk_xts()
head(log_ret_pvb_stock_xts)
plot(log_ret_pvb_stock_xts)
plot(log_ret_pvb_stock_xts, xlab="Years", ylab="Quarterly Returns", main = "Distribution of stock returns from 2011 to 2022" )
# Calculate the equally weighted portfolio return for each date
log_ret_pvb_stock_xts$equally_weighted_portfolio <- rowMeans(log_ret_pvb_stock_xts[, -1], na.rm = TRUE)
# Print the updated data frame
head(log_ret_pvb_stock_xts)
library(ggplot2)
# Combine the data into a single data frame
combined_data <- data.frame(
date = index(log_ret_pvb_stock_xts),
PVB = coredata(log_ret_pvb_stock_xts$equally_weighted_portfolio),
PSB = coredata(log_ret_psb_stock_xts$equally_weighted_portfolio)
)
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
#DAILY STOCK DATA OF PSB BANKS#
#PERIOD JAN 2011 TO SEP 2023
psb_stock_price_data <- tq_get(psb_stocks,
from = '-01-01',
to = '2023-09-30',
get = 'stock.prices')
sort(unique(psb_stock_price_data$symbol))
log_ret_psb_stock <- psb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_psb_stock)
log_ret_psb_stock_xts <- log_ret_psb_stock %>%
spread(symbol, value = ret) %>%
tk_xts()
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
#DAILY STOCK DATA OF PSB BANKS#
#PERIOD JAN 2011 TO SEP 2023
psb_stock_price_data <- tq_get(psb_stocks,
from = '-01-01',
to = '2023-09-30',
get = 'stock.prices')
sort(unique(psb_stock_price_data$symbol))
log_ret_psb_stock <- psb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_psb_stock)
plot(log_ret_psb_stock_xts$equally_weighted_portfolio)
#CALCULATING MONTHLY STOCK RETURN AND STANDARD DEVIATION ON EACH OF THE 100 STOCKS##
average_monthly_return <- colMeans(monthly_return)
##PART 2 - EFFICIENT FRONTIER OF RISKY ASSETS
wts <- runif(n = length(nifty_100))
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
#DAILY STOCK DATA OF PSB BANKS#
#PERIOD JAN 2011 TO SEP 2023
psb_stock_price_data <- tq_get(psb_stocks,
from = '-01-01',
to = '2023-09-30',
get = 'stock.prices')
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
#DAILY STOCK DATA OF PSB BANKS#
#PERIOD JAN 2011 TO SEP 2023
psb_stock_price_data <- tq_get(psb_stocks,
from = '-01-01',
to = '2023-09-30',
get = 'stock.prices')
View(psb_stock_price_data)
##PART 2##
#NSE DATA OF PRIVATE SECTOR BANKS
pvb_stocks <- c('AXISBANK.NS','BANDHANBNK.NS','CSBBANK.NS','CUB.NS','DCBBANK.NS',
'DHANBANK.NS','FEDERALBNK.NS','HDFCBANK.NS','ICICIBANK.NS','IDBI.NS',
'IDFCFIRSTB.NS','INDUSINDBK.NS','J&KBANK.NS','KARURVYSYA.NS','KOTAKBANK.NS',
'KTKBANK.NS','RBLBANK.NS','SOUTHBANK.NS','YESBANK.NS')
#DAILY STOCK DATA OF PVB BANKS#
#PERIOD JAN 2011 TO SEP 2023
pvb_stock_price_data <- tq_get(pvb_stocks,
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
psb_stocks <- c('ANDHRABANK.NS','BANKBARODA.NS','BANKINDIA.NS','MAHABANK.NS',
'CANBK.NS','CENTRALBK.NS','CORPBANK.NS','DENABANK.NS','IDBIBANK.NS',
'INDIANB.NS','IOB.NS','ORIENTBANK.NS','PSB.NS','PNB.NS',
'SBBJ.NS','SBIN.NS','MYSOREBANK.NS','SBT.NS','SYNDIBANK.NS',
'UCOBANK.NS','UNIONBANK.NS','UNITEDBNK.NS','VIJAYABANK.NS')
#DAILY STOCK DATA OF PSB BANKS#
#PERIOD JAN 2011 TO SEP 2023
psb_stock_price_data <- tq_get(psb_stocks,
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
sort(unique(psb_stock_price_data$symbol))
log_ret_psb_stock <- psb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_psb_stock)
log_ret_psb_stock_xts <- log_ret_psb_stock %>%
spread(symbol, value = ret) %>%
tk_xts()
head(log_ret_psb_stock_xts)
plot(log_ret_psb_stock_xts)
plot(log_ret_psb_stock_xts, xlab="Years", ylab="Quarterly Returns", main = "Distribution of stock returns from 2011 to 2022" )
# Calculate the equally weighted portfolio return for each date
log_ret_psb_stock_xts$equally_weighted_portfolio <- rowMeans(log_ret_psb_stock_xts[, -1], na.rm = TRUE)
# Print the updated data frame
head(log_ret_psb_stock_xts)
plot(log_ret_psb_stock_xts$equally_weighted_portfolio, xlab="Years", ylab="Quarterly Returns", main = "Equally weighted portfolio returns from 2011 to 2022" )
sort(unique(pvb_stock_price_data$symbol))
log_ret_pvb_stock <- pvb_stock_price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'quarterly',
col_rename = 'ret',
type = 'log')
head(log_ret_pvb_stock)
log_ret_pvb_stock_xts <- log_ret_pvb_stock %>%
spread(symbol, value = ret) %>%
tk_xts()
head(log_ret_pvb_stock_xts)
plot(log_ret_pvb_stock_xts)
plot(log_ret_pvb_stock_xts, xlab="Years", ylab="Quarterly Returns", main = "Distribution of stock returns from 2011 to 2022" )
# Calculate the equally weighted portfolio return for each date
log_ret_pvb_stock_xts$equally_weighted_portfolio <- rowMeans(log_ret_pvb_stock_xts[, -1], na.rm = TRUE)
# Print the updated data frame
head(log_ret_pvb_stock_xts)
library(ggplot2)
# Combine the data into a single data frame
combined_data <- data.frame(
date = index(log_ret_pvb_stock_xts),
PVB = coredata(log_ret_pvb_stock_xts$equally_weighted_portfolio),
PSB = coredata(log_ret_psb_stock_xts$equally_weighted_portfolio)
)
colnames(combined_data) <- c("year","PVB","PSB")
head(combined_data)
ggplot(combined_data, aes(x = year))+
geom_line(aes(y = PVB, color = "PVB"), size = 0.5)+
geom_line(aes(y = PSB, color = "PSB"), size = 0.5)+
labs(title = "Equally Weighted Portfolio Quarterly Returns (1997-2023)",
x = "Year", y = "Returns") +
scale_color_manual(values = c("PVB" = "blue", "PSB" = "orange")) +
theme_minimal() +
theme(legend.position = "bottom") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y")
plot(log_ret_psb_stock_xts$equally_weighted_portfolio)
#CALCULATING MONTHLY STOCK RETURN AND STANDARD DEVIATION ON EACH OF THE 100 STOCKS##
average_monthly_return <- colMeans(monthly_return)
nifty_100 <- tq_get("NIFTY100.NS",
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
nifty_100 <- tq_get("NIFTY100",
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
nifty_100 <- tq_index("NIFTY100")
nifty_100 <- tq_get("NIFTY100",
from = '1990-01-01',
to = '2023-09-30',
get = 'stock.prices')
names <- read.csv("ind_nifty100list.csv")
paste(names$Symbol, ".NS")
paste(names$Symbol, ".NS",sep = "")
# Example tickers for Nifty 100 - Replace with actual tickers
nifty100_tickers <- paste(names$Symbol, ".NS",sep = "")
# Function to get stock prices
get_stock_prices <- function(tickers, start_date, end_date) {
tq_get(tickers, from = start_date, to = end_date, get = "stock.prices")
}
# Get stock prices for Nifty 100 from 1990-01-01 to 2023-09-30
stock_prices <- get_stock_prices(nifty100_tickers, "1990-01-01", "2023-09-30")
# View the data
print(stock_prices)
View(stock_prices)
nifty_100 = stock_prices$low
wts <- runif(n = length(nifty_100))
print(wts)
print(sum(wts))
wts <- wts/sum(wts)
print(wts)
sum(wts)
##PORTFOLIO RETURN##
port_returns <- (sum(wts * average_monthly_return) + 1)^12 - 1
